<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Crunchy Data PostgreSQL Operator Documentation</title>
    <link>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/</link>
    <description>Recent content in Design on Crunchy Data PostgreSQL Operator Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design</title>
      <link>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/designoverview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/designoverview/</guid>
      <description>Provisioning So, what does the Postgres Operator actually deploy when you create a cluster?
On this diagram, objects with dashed lines are components that are optionally deployed as part of a PostgreSQL Cluster by the operator. Objects with solid lines are the fundamental and required components.
For example, within the Primary Deployment, the metrics container is completely optional. That component can be deployed using either the operator configuration or command line arguments if you want to cause metrics to be collected from the Postgres container.</description>
    </item>
    
    <item>
      <title>Custom Configuration</title>
      <link>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/custom-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/custom-config/</guid>
      <description>Custom Postgres Configurations Users and administrators can specify a custom set of Postgres configuration files be used when creating a new Postgres cluster. The configuration files you can change include -
 postgresql.conf pg_hba.conf setup.sql  Different configurations for PostgreSQL might be defined for the following -
 OLTP types of databases OLAP types of databases High Memory Minimal Configuration for Development Project Specific configurations Special Security Requirements  Global ConfigMap If you create a configMap called pgo-custom-pg-config with any of the above files within it, new clusters will use those configuration files when setting up a new database instance.</description>
    </item>
    
    <item>
      <title>Custom SSL Configuration</title>
      <link>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/custom-config-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/custom-config-ssl/</guid>
      <description>Custom Postgres SSL Configurations The Crunchy Data Postgres Operator can create clusters that use SSL authentication by utilizing custom configmaps.
Configuration Files for SSL Authentication Users and administrators can specify a custom set of Postgres configuration files to be used when creating a new Postgres cluster. This example uses the files below-
 postgresql.conf pg_hba.conf pg_ident.conf  along with generated security certificates, to setup a custom SSL configuration.
Config Files Purpose The postgresql.</description>
    </item>
    
    <item>
      <title>Namespace</title>
      <link>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/namespace/</guid>
      <description>Operator Namespaces The Operator itself knows which namespace it is running within by referencing the PGO_OPERATOR_NAMESPACE environment variable at startup time from within its Deployment definition.
The PGO_OPERATOR_NAMESPACE environment variable a user sets in their .bashrc file is used to determine what namespace the Operator is deployed into. The PGO_OPERATOR_NAMESPACE variable is referenced by the Operator during deployment.
The .bashrc NAMESPACE environment variable a user sets determines which namespaces the Operator will watch.</description>
    </item>
    
    <item>
      <title>OLM</title>
      <link>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/olm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.0.1/gettingstarted/design/olm/</guid>
      <description>Operator Lifecycle Management The Postgres Operator supports Redhats OLM (operator lifecycle manager) to a degree starting with pgo 4.0.
The Postgres Operator supports the different deployment models as documented here:
https://github.com/operator-framework/operator-lifecycle-manager/blob/master/Documentation/design/operatorgroups.md
Operator Hub The Operator shows up on the Redhat Operator Hub at the following location:
https://www.operatorhub.io/operator/postgres-operator.v3.5.0</description>
    </item>
    
  </channel>
</rss>