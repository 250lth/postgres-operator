== Crunchy Postgres Operator
v1.0.0, {docdate}

image::docs/crunchy_logo.png?raw=true[]

Crunchy's Postgres Operator provides a Kubernetes operator capability
for managing PostgreSQL containers deployed within a Kubernetes cluster.

# Usage

Some examples of using the command line interface:

.Display Database or Cluster Information
[source,bash]
----
pgo show database all
pgo show database db1 db2 db3
pgo show cluster mycluster
----

.Create Database or Cluster
[source,bash]
----
pgo create database mydatabase
pgo create cluster mycluster
----

.Delete a Database or Cluster
[source,bash]
----
pgo delete database mydatabase
pgo delete cluster mycluster
----

.Backup Database or Cluster
[source,bash]
----
pgo create backup mycluster
pgo create backup mydatabase
----

.Restore Database
[source,bash]
----
pgo create database myrestore --backup-pvc=mypvc --backup-path=foo-backups/2017-03-21-15-57-21
----

.View PVC
[source,bash]
----
pgo show pvc mypvc
----


# postgres-operator Container

In the following diagram, the postgres operator client, *pgo*, is
shown interacting with the postgres operator that runs within
a Kubernetes cluster.  The operator is responsible for creating
or modifying PostgreSQL databases deployed within the Kube cluster.

image::docs/operator-diagram.png?raw=true[]

The operator funtionality runs in a Pod deployed to your
Kubernetes cluster.  The *postgres-operator* Docker container
is available on Dockerhub.  

You can also build the Docker image for *postgres-operator* using
the build instructions below.

# Command Line Interface

With the operator deployed, you can then use the *pgo* command line 
interface to execute commands that the *postgres-operator* understands 
and reacts to.

You can download a pre-built *pgo* CLI binary from 
the Releases page on the github repository or build
it yourself using the build instructions below.


# Build and Setup Instructions

Here are the steps required to build the operator and CLI
from source:

=== Create Project and Clone 
....
mkdir -p $HOME/odev/src $HOME/odev/bin $HOME/odev/pkg
export GOPATH=$HOME/odev
export GOBIN=$GOPATH/bin;export PATH=$PATH:$GOBIN
mkdir -p $GOPATH/src/github.com/crunchydata/
cd $GOPATH/src/github.com/crunchydata
git clone https://github.com/CrunchyData/postgres-operator.git
cd postgres-operator
export COROOT=$GOPATH/src/github.com/crunchydata/postgres-operator
....

==== Get the dependencies:

Install a golang compiler, this can be done with either
your package manager or by following directions
from https://golang.org/dl/

Then install the project library dependencies:
....
cd $COROOT
go get -u github.com/FiloSottile/gvt
gvt restore
....

==== Compile the CLI:
....
cd $COROOT
make pgo
which pgo
....

==== Compile and build the operator Docker image:
....
cd $COROOT
make operatorimage
docker images | grep operator
....


==== Deploy the postgres Operator
note that this will create and use */data* on your
local system as the persistent store for the operator to use
for its persistent volume:
....
cd $COROOT/examples/operator
./run.sh
kubectl get pod -l 'name=postgres-operator'
kubectl get thirdpartyresources
....

Note that this example will create a PVC called *crunchy-pvc* that is
referenced in the examples and *pgo* configuration file as the
desired PVC to use when databases and clusters are created.

When you first run the operator, it will create the required
ThirdPartyResources.

==== Setup initial configuration file for the postgres operator CLI
....
cp $COROOT/examples/sample.pgo.yaml $HOME/.pgo.yaml
....

Note that this config file assumes your Kubernetes config file is
located in */etc/kubernetes/admin.conf*.  Update this kubeconfig
path to match your local Kube config file location.

==== Viewing Operator Resources

You can view the various resources created and used by the
operator as follows:
....
kubectl get pgdatabases
kubectl get pgclusters
kubectl get pgbackups
....

