= PostgreSQL Operator
v1.5.2, {docdate}

== Table of Contents

* <<Overview>>
* <<Requirements>>
* <<Build and Install Instructions>>
* <<Configuration>>
* <<Examples>>
* <<PostgreSQL Operator Container>>

[#Overview]
== Overview

NOTE:  The 1.5.X branch is based on Third Party Resources which have
been deprecated in Kubernetes 1.7.  The master branch will move
forward with a Custom Resource Definition implementation which is
supported starting with Kube 1.7.  TPRs will be removed in Kube 1.8.

The PostgreSQL Operator provides a Kubernetes operator capability for managing PostgreSQL Clusters deployed within a Kubernetes environment.

image::docs/tty.gif?raw=true[]

The PostgreSQL Operator leverages Kubernetes Third Party Resources to define custom resource types such as:

 * *pgcluster*
 * *pgbackups*
 * *pgupgrades*
 * *pgclones*
 * *pgpolicies*
 * *pgpolicylogs*


Once those custom objects are defined, Kubernetes provides the ability to create and manage those objects similar to any other native Kubernetes object.

The PostgreSQL Operator runs within Kubernetes detecting these new custom object types being created, updated, or removed.

Once the objects are detected, the PostgreSQL Operator enables users to perform operations across the Kubernetes environment, including:

* Create a PostgreSQL Cluster
* Destroy a PostgreSQL Cluster
* Backup a PostgreSQL Cluster
* Scale a a PostgreSQL Cluster
* Restore a PostgreSQL Cluster
* Upgrade a PostgreSQL Cluster
* View PVC
* Test Connections to a PostgreSQL Cluster
* Clone a PostgreSQL Cluster
* Create a SQL-based Policy
* Apply a SQL-based Policy to a PostgreSQL Cluster
* Perform User Management
* Apply User Defined Labels to PostgreSQL Clusters
* Perform Password Management

What actually gets created on the Kubernetes cluster for a
*pgcluster* resource is defined as a *deployment strategy*.  Strategies
are documented in detail in link:docs/design.asciidoc#postgresql-operator-deployment-strategies[Deployment Strategies].

[#Requirements]
== Requirements

These versions of Kubernetes and OpenShift are required due to the use of ThirdPartyResources which first emerged in
these versions.

* *Kubernetes 1.5.3+*
* *OpenShift Origin 1.5.1+*
* *OpenShift Container Platform 3.5*

The operator is developed with the following specific version of Golang; you can find this distribution on the official
link:https://golang.org/dl/[Golang website]. Because Go binaries essentially have Go runtime bundled with them, it is
important to build on a platform that is compatible with the target deployment platform.

* *Golang 1.8.x*

The Operator makes use of the following containers:

* link:https://hub.docker.com/r/crunchydata/crunchy-postgres/[PostgreSQL 9.5+ Container]
* link:https://hub.docker.com/r/crunchydata/crunchy-backup/[PostgreSQL Backup Container]
* link:https://hub.docker.com/r/crunchydata/crunchy-upgrade/[PostgreSQL Upgrade Container]
* link:https://hub.docker.com/r/crunchydata/lspvc/[PostgreSQL PVC Listing Container]
* link:https://hub.docker.com/r/crunchydata/postgres-operator/[postgres-operator Container]

This Operator has also been tested on the following operating systems:

* *CentOS 7*
* *RHEL 7*

[#Build and Install Instructions]
== Build and Install Instructions

To build and deploy the Operator on your Kubernetes system, follow
the instructions documented on the link:docs/build.asciidoc[Build and Install] page.

With the operator deployed, the *pgo* command line
interface can execute commands that the *postgres-operator* understands
and reacts to.

[#Configuration]
== Configuration

The operator is template-driven; this makes it simple to configure both the client and the operator. The
configuration options are documented on the link:docs/config.asciidoc[Configuration] page.

[#Examples]
== Examples

Some examples of using the *pgo* command line interface are as follows.

.Display Cluster Information
[source,bash]
----
pgo show cluster all
pgo show cluster db1 db2 db3
pgo show cluster mycluster
pgo show cluster mycluster --show-secrets=true
----

.Create Cluster
[source,bash]
----
pgo create cluster mycluster
----

.Scale Cluster
[source,bash]
----
pgo scale mycluster --replica-count=2
----

.Delete a Cluster
[source,bash]
----
pgo delete cluster mycluster
----

.Backup Cluster
[source,bash]
----
pgo create backup mycluster
----

.Restore Cluster
[source,bash]
----
pgo create cluster myrestore --secret-from=foo --backup-pvc=mypvc --backup-path=foo-backups/2017-03-21-15-57-21
----

.Upgrade Cluster (minor Postgres version upgrade)
[source,bash]
----
pgo create upgrade mycluster
----

.Upgrade Cluster (major Postgres version upgrade from 9.5 to 9.6)
[source,bash]
----
pgo create upgrade mycluster --upgrade-type=major
----

.View PVC
[source,bash]
----
pgo show pvc mypvc
----

.Test Connections
[source,bash]
----
pgo test mycluster
----

.Clone Cluster
[source,bash]
----
pgo clone mycluster --name=myclone
----

.Create a Policy
[source,bash]
----
pgo create policy policy1 --in-file=./policy1.sql
pgo create policy policy1 --url=https://someurl/policy1.sql
----

.Apply a Policy
WARNING:  policies are POWERFUL because they are executed as the superuser in PostgreSQL
which allows for any sort of SQL to be executed.
[source,bash]
----
pgo apply policy1 --selector=name=mycluster
----

Details on the *pgo* commands and complex examples are found in the
link:docs/user-guide.asciidoc[User Guide]

[#PostgreSQL Operator Container]
== PostgreSQL Operator Container

In the following diagram, the PostgreSQL operator client, *pgo*, is
shown interacting with the PostgreSQL operator that runs within
a Kubernetes cluster.  The operator is responsible for creating
or modifying PostgreSQL databases deployed within the Kubernetes cluster.

image::docs/operator-diagram.png?raw=true[]

The operator functionality runs in a Kubernetes Deployment on your
Kubernetes cluster.  The *postgres-operator* Docker container image
is available on link:https://hub.docker.com/r/crunchydata/postgres-operator/[Dockerhub].

You can also build the Docker image for *postgres-operator* using
the build instructions located on the link:docs/build.asciidoc[Build and Setup] page.
