= PostgreSQL Operator Build and Setup
v1.0.0, {docdate}

== Overview

This document describes how to build from source code the
Postgres Operator.  If you don't want to build the images
from source, you can download them from the following:

 * Dockerhub (crunchydata/lspvc and crunchydata/postgres-operator images)
 * link:https://github.com/CrunchyData/postgres-operator/releases[Github Releases]  (pgo client and client configuration files, extracted to your $HOME)

== Requirements

* Kubernetes 1.5.3+
* link:https://hub.docker.com/r/crunchydata/crunchy-postgres/[PostgreSQL 9.5+ Container]
* link:https://hub.docker.com/r/crunchydata/crunchy-backup/[PostgreSQL Backup Container]

== Kubernetes Environment

To test the *postgres-operator* you will need a Kubernetes cluster
environment.  There are many ways to install a Kube cluster, but for the
purposes of this document, I have created a test VM on Centos 7 that
installs a Kube cluster using the kubeadm project as described here.  link: http://linoxide.com/containers/setup-kubernetes-kubeadm-centos/

The kubeadm installation will create */etc/kubernetes/admin.conf* for
the kubeconfig file you will use to execute the *postgres-operator*, it
needs to be readable from your user account, to enable this change
the permissions:
....
sudo chmod +r /etc/kubernetes/admin.conf
....

Once you have your Kube VM created, install some of the 
required dependencies:
....
yum -y install git
....

*NOTE* - as of Kube 1.6, RBAC security is enabled on most Kube
installations.  With RBAC, the *postgres-operator* needs permissions
granted to it to enable ThirdPartyResources viewing.  You can grant the
*default* Service Account a cluster role as one way to enable
permissions for the operator.  This course level of granting permissions
is not recommended for production.  This command will enable
the *default* Service Account to have the *cluster-admin* role:
....
kubectl create clusterrolebinding permissive-binding \
	--clusterrole=cluster-admin \
	--user=admin \
	--user=kubelet \
       	--group=system:serviceaccounts:default
....

See https://kubernetes.io/docs/admin/authorization/rbac/ for more
details on how to enable RBAC roles.

== Create Project and Clone 
In your .bashrc file, include the following:
....
export GOPATH=$HOME/odev
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
export COROOT=$GOPATH/src/github.com/crunchydata/postgres-operator
export CO_BASEOS=centos7
export CO_VERSION=1.0.0
export CO_IMAGE_TAG=$CO_BASEOS-$CO_VERSION
....

Then execute these commands to build the project structure:
....
mkdir -p $HOME/odev/src $HOME/odev/bin $HOME/odev/pkg
mkdir -p $GOPATH/src/github.com/crunchydata/
cd $GOPATH/src/github.com/crunchydata
git clone https://github.com/CrunchyData/postgres-operator.git
cd postgres-operator
....

== Get Pre-built Images
At this point if you want to avoid building the images and binary
from source, you can pull down the Docker images as follows:
....
docker pull crunchydata/lspvc:centos7-1.0.0
docker pull crunchydata/postgres-operator:centos7-1.0.0
....

Then to get the *pgo* client, go to the Releases page and download the tar ball, uncompress
it into your $HOME directory:
....
cd $HOME
wget https://github.com/CrunchyData/postgres-operator/releases/download/v1.0/postgres-operator.1.0.0.tar.gz
tar xvzf ./postgres-operator.1.0.0.tar.gz
....

Lastly, add the *pgo* client into your PATH.


== Source Dependencies

Install a golang compiler, this can be done with either
your package manager or by following directions
from https://golang.org/dl/

Then install the project library dependencies:
....
cd $COROOT
go get -u github.com/FiloSottile/gvt
gvt restore
....

In a development environment you will likely want to create a 
*docker* group and add your user ID to that group, this allows 
you as your normal user ID to access the *docker* daemon and 
issue commands to it:
....
sudo groupadd docker
sudo usermod -a -G docker youruserID
sudo systemctl restart docker
newgrp docker 
....

== Compile *pgo*
....
cd $COROOT
make pgo
which pgo
....

== Build the Docker Images
....
cd $COROOT
make operatorimage
make lsimage
docker images | grep crunchydata
....


== Deploy the PostgreSQL Operator
note that this will create and use */data* on your
local system as the persistent store for the operator to use
for its persistent volume:
....
cd $COROOT/examples/operator
./run.sh
kubectl get pod -l 'name=postgres-operator'
kubectl get thirdpartyresources
....

Note that this example will create a PVC called *crunchy-pvc* that is
referenced in the examples and *pgo* configuration file as the
desired PVC to use when databases and clusters are created.

When you first run the operator, it will create the required
ThirdPartyResources.

== Setup *pgo* Configuration File 

The *pgo* client requires two configuration files be copied
to your $HOME as follows:
....
cp $COROOT/examples/.pgo.yaml $HOME
cp $COROOT/examples/.pgo.lspvc-template.yaml $HOME
vi $HOME/.pgo.yaml
....

Edit the $HOME/.pgo.yaml file changing the following
settings:
....
KUBECONFIG:  /etc/kubernetes/admin.conf
LSPVC_TEMPLATE:  /home/yourid/.pgo.lspvc-template.json
....

Note that this config file assumes your Kubernetes config file is
located in */etc/kubernetes/admin.conf*.  Update this kubeconfig
path to match your local Kube config file location.  Also, update
the location of the LSPVC_TEMPLATE value to match your $HOME value.

== Viewing Operator Resources

When you first run the operator, it will look for the presence
of its third party resources, and create them if not found.  You can view the various resources created and used by the
operator as follows:
....
kubectl get thirdpartyresources
kubectl get pgdatabases
kubectl get pgclusters
kubectl get pgbackups
....

At this point, you should be ready to start using the *pgo* client!

