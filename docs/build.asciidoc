== PostgreSQL Operator Build and Setup
v1.0.0, {docdate}

== Overview

This document describes how to build from source code the
Postgres Operator.

=== Requirements

* Kubernetes 1.5.3+
* link:https://hub.docker.com/r/crunchydata/crunchy-postgres/[PostgreSQL 9.5+ Container]
* link:https://hub.docker.com/r/crunchydata/crunchy-backup/ [PostgreSQL Backup Container]


=== Create Project and Clone 
....
mkdir -p $HOME/odev/src $HOME/odev/bin $HOME/odev/pkg
export GOPATH=$HOME/odev
export GOBIN=$GOPATH/bin;export PATH=$PATH:$GOBIN
mkdir -p $GOPATH/src/github.com/crunchydata/
cd $GOPATH/src/github.com/crunchydata
git clone https://github.com/CrunchyData/postgres-operator.git
cd postgres-operator
export COROOT=$GOPATH/src/github.com/crunchydata/postgres-operator
....

==== Get the dependencies:

Install a golang compiler, this can be done with either
your package manager or by following directions
from https://golang.org/dl/

Then install the project library dependencies:
....
cd $COROOT
go get -u github.com/FiloSottile/gvt
gvt restore
....

==== Compile the CLI:
....
cd $COROOT
make pgo
which pgo
....

==== Compile and build the operator Docker image:
....
cd $COROOT
make operatorimage
docker images | grep operator
....


==== Deploy the PostgreSQL Operator
note that this will create and use */data* on your
local system as the persistent store for the operator to use
for its persistent volume:
....
cd $COROOT/examples/operator
./run.sh
kubectl get pod -l 'name=postgres-operator'
kubectl get thirdpartyresources
....

Note that this example will create a PVC called *crunchy-pvc* that is
referenced in the examples and *pgo* configuration file as the
desired PVC to use when databases and clusters are created.

When you first run the operator, it will create the required
ThirdPartyResources.

==== Setup initial configuration file for the postgres operator CLI
....
cp $COROOT/examples/sample.pgo.yaml $HOME/.pgo.yaml
....

Note that this config file assumes your Kubernetes config file is
located in */etc/kubernetes/admin.conf*.  Update this kubeconfig
path to match your local Kube config file location.

==== Viewing Operator Resources

When you first run the operator, it will look for the presence
of its third party resources, and create them if not found.  You can view the various resources created and used by the
operator as follows:
....
kubectl get thirdpartyresources
kubectl get pgdatabases
kubectl get pgclusters
kubectl get pgbackups
....

