== PostgreSQL Operator Configuration
v1.0.0, {docdate}


This document describes the configuration options
for the *postgres operator*.

== pgo Client Configuration

There is a configuration file named *.pgo.yaml* for the operator client.  It
can be defined in the following locations:
 
 * . (current directory)
 * $HOME
 * /etc/pgo/

The .pgo.yaml file location is checked in that order.

=== pgo Configuration Format

The sample pgo client configuration file, included in
*examples/sample.pgo.yaml*, looks like this:

[source,yaml]
....
KUBECONFIG:  /etc/kubernetes/admin.conf
DB:
  PVC_NAME:  crunchy-pvc
  PVC_SIZE:  100M
  PVC_ACCESS_MODE:  ReadWriteMany
  CCP_IMAGE_TAG:  centos7-9.5-1.2.8
  PORT:  5432
  PG_MASTER_USER:  master
  PG_MASTER_PASSWORD:  password
  PG_USER:  testuser
  PG_PASSWORD:  password
  PG_DATABASE:  userdb
  PG_ROOT_PASSWORD:  password
  FSGROUP:  26
  SUPPLEMENTALGROUPS:  65534
PGO:
  LSPVC_TEMPLATE:  /home/jeffmc/.pgo.lspvc-template.json
  CO_IMAGE_TAG:  centos7-1.0.0
  DEBUG:  false
CLUSTER:
  REPLICAS:  2
....

Values in the pgo configuration file have the following meaning:

.pgo Configuration File Definitions
[width="90%",cols="m,2",frame="topbot",options="header"]
|======================
|Setting | Definition
|KUBECONFIG        | the path to the kubeconfig file
|DB.PVC_NAME        |if set, the PVC to use for created databases, only makes sense when your file system is sharable
|DB.PVC_SIZE        |the size to use when creating new PVCs (e.g. 100M, 1Gi)
|DB.PVC_ACCESS_MODE        |the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce)
|DB.CCP_IMAGE_TAG        |newly created containers will be based on this image version (e.g. centos7-9.6-1.2.8)
|DB.PORT        | the PostgreSQL port to use for new containers (e.g. 5432)
|DB.PG_MASTER_USER        | the PostgreSQL master user name
|DB.PG_MASTER_PASSWORD        | the PostgreSQL master user password
|DB.PG_USER        | the PostgreSQL normal user name
|DB.PG_PASSWORD        | the PostgreSQL normal user password
|DB.PG_ROOT_PASSWORD        | the PostgreSQL *postgres* user password
|DB.FSGROUP        | if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions 
|DB.SUPPLEMENTALGROUPS        | if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions 
|PGO.LSPVC_TEMPLATE        | the PVC lspvc template file used to view PVCs
|PGO.CO_IMAGE_TAG        | image tag to use for the PostgreSQL operator containers
|PGO.DEBUG        | set to true if you want to see debug messages from the pgo client
|CLUSTER.REPLICAS        | the number of cluster replicas to create for newly created clusters
|======================


== Operator Configuration (Server)

The operator is run as a Kube Deployment on the Kube cluster
within a namespace.  

The script *example/operator/run.sh* will create the operator
deployment on your Kube cluster.  

That script will also create a PV named *crunchy-pv* using a HostPath of */data*  and a PVC named *crunchy-pvc* on your local system.  This is 
only for testing the operator, edit or remove the PV/PVC creation
to meet your requirements.

To enable DEBUG messages from the operator pod, set the *DEBUG* environment
variable to *true* within its deployment file *deployment.json*.

=== Operator Templates

The database and cluster Kube objects that get created by the operator
are based on json templates that are added into the operator deployment
by means of a mounted volume.

The templates are located in the *$COROOT/conf/postgres-operator* directory
and get added into the mounted volume directory when the operator
is started.  The templates are copied to a HostPath location by the *example/operator/run.sh* script, that HostPath location if mounted as a volume into
the operator pod.

For your persistent file system, you might need to adjust the templates
to add *fsGroup* or *supplementalGroup* attributes to your *pgo* configuration
file.

=== Persistence

The operator will create PVCs for new databases if a PVC_NAME is not
set in the user's pgo client configuration or specified via a command
line.  This model of PVC creation supports a persistent file system
that is not shareable (e.g. Amazon EBS storage).  In this model, since
PVCs can not be shared between Pods, you need to create a unique
PVC for each database to use.

The operator will create new PVCs using this naming convention:
*dbname-pvc* where *dbname* is the database name you have specified.  For
example, if you run:
....
pgo create database example1
....

It will result in a PVC being created named *example1-pvc*.

If however, you are using a shared persistent file system such as NFS or HostPath, 
and you want to share a single PVC, the pgo user can define the *DB.PVC_NAME*
configuration setting.  When set, that value will be used for all
databases created by the operator.
