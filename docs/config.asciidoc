= PostgreSQL Operator Configuration
v2.0.0, {docdate}


This document describes the configuration options
for the *PostgreSQL operator*.

== pgo Client Configuration

Sample pgo configuration files are located in the $COROOT/examples directory.

You will need to copy a sample to your $HOME/.pgo.yaml location.  It
can be defined in the following locations:

 * . (current directory)
 * $HOME
 * /etc/pgo/

The .pgo.yaml file location is checked in that order.

=== pgo Configuration Format

The sample pgo client configuration file, included in
*examples/pgo.yaml.emptydir*, looks like this:

[source,yaml]
....
Kubeconfig:  /etc/kubernetes/admin.conf
Cluster:
  CCPImageTag:  centos7-9.6.5-1.6.0
  Port:  5432
  PrimaryPassword:  password
  User:  testuser
  Password:  password
  Database:  userdb
  RootPassword:  password
  Strategy:  1
  Replicas:  0
  Policies:  policy1,policy2
  PasswordAgeDays:  60
  PasswordLength:  8
PrimaryStorage:
  Name:  crunchy-pvc
  StorageClass:  standard
  AccessMode:  ReadWriteMany
  Size:  100M
  StorageType:  emptydir
  Fsgroup:  26
  SupplementalGroups:  65534
ReplicaStorage:
  Name:  crunchy-pvc
  StorageClass:  standard
  AccessMode:  ReadWriteMany
  Size:  100M
  StorageType:  emptydir
  Fsgroup:  26
  SupplementalGroups:  65534
BackupStorage:
  Name:  crunchy-pvc
  StorageClass:  standard
  AccessMode:  ReadWriteMany
  Size:  100M
  StorageType:  shared
  Fsgroup:  26
  SupplementalGroups:  65534
Pgo:
  LSPVCTemplate:  /home/youruserid/.pgo.lspvc-template.json
  CSVLoadTemplate:  /home/youruserid/.pgo.csvload-template.json
  COImageTag:  centos7-2.0
  Debug:  false
....

Values in the pgo configuration file have the following meaning:

.pgo Configuration File Definitions
[width="90%",cols="m,2",frame="topbot",options="header"]
|======================
|Setting | Definition
|Kubeconfig        | the path to the kubeconfig file
|Cluster.CCPImageTag        |newly created containers will be based on this image version (e.g. centos7-9.6.5-1.6.0), unless you override it using the --ccp-image-tag command line flag
|Cluster.Port        | the PostgreSQL port to use for new containers (e.g. 5432)
|Cluster.PrimaryPassword        | the PostgreSQL primary user password, when specified, it will be stored in the secret holding the primary user credentials, if not specified the value will be generated
|Cluster.User        | the PostgreSQL normal user name
|Cluster.Password        | the PostgreSQL normal user password, when specified, it will be stored in the secret holding the normal user credentials, if not specified the value will be generated
|Cluster.RootPassword        | the PostgreSQL *postgres* user password, when specified, it will be stored in the secret holding the root user credentials, if not specified the value will be generated
|Cluster.Strategy        | sets the deployment strategy to be used for deploying a cluster, currently there is only strategy *1*
|Cluster.Replicas        | the number of cluster replicas to create for newly created clusters
|Cluster.Policies        | optional, list of policies to apply to a newly created cluster, comma separated, must be valid policies in the catalog
|Cluster.PasswordAgeDays        | optional, if set, will set the VALID UNTIL date on passwords to this many days in the future when creating users or setting passwords, defaults to 365 days
|Cluster.PasswordLength        | optional, if set, will determine the password length used when creating passwords, defaults to 8
|PrimaryStorage.Name        |for the primary PostgreSQL deployment, if set, the PVC to use for created databases, used when the storage type is *existing*
|PrimaryStorage.StorageClass        |for the primary PostgreSQL deployment, for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)
|PrimaryStorage.AccessMode        |for the primary PostgreSQL deployment, the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.
|PrimaryStorage.Size        |for the primary PostgreSQL deployment, the size to use when creating new PVCs (e.g. 100M, 1Gi)
|PrimaryStorage.StorageType        |for the primary PostgreSQL deployment, supported values are either *dynamic*, *existing*, *create*, or *emptydir*, if not supplied, *emptydir* is used
|PrimaryStorage.Fsgroup        | optional, if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions
|PrimaryStorage.SupplementalGroups        | optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions
|ReplicaStorage.Name        |for the replica PostgreSQL deployments, if set, the PVC to use for created databases, used when the storage type is *existing*
|ReplicaStorage.StorageClass        |for the replica PostgreSQL deployment, for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)
|ReplicaStorage.AccessMode        |for the replica PostgreSQL deployment, the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.
|ReplicaStorage.Size        |for the replica PostgreSQL deployment, the size to use when creating new PVCs (e.g. 100M, 1Gi)
|ReplicaStorage.StorageType        |for the replica PostgreSQL deployment, supported values are either *dynamic*, *existing*, *create*, or *emptydir*, if not supplied, *emptydir* is used
|ReplicaStorage.Fsgroup        | optional, if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions
|ReplicaStorage.SupplementalGroups        | optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions
|BackupStorage.Name        |for the backup job, if set, the PVC to use for holding backup files, used when the storage type is *existing*
|BackupStorage.StorageClass        |for the backup job, for a dynamic storage type, you can specify the storage class used for storage provisioning(e.g. standard, gold, fast)
|BackupStorage.AccessMode        |for the backup job, the access mode for new PVCs (e.g. ReadWriteMany, ReadWriteOnce, ReadOnlyMany). See below for descriptions of these.
|BackupStorage.Size        |for the backup job, the size to use when creating new PVCs (e.g. 100M, 1Gi)
|BackupStorage.StorageType        |for the backup job , supported values are either *dynamic*, *existing*, *create*, or *emptydir*, if not supplied, *emptydir* is used
|BackupStorage.Fsgroup        | optional, if set, will cause a *SecurityContext* and *fsGroup* attributes to be added to generated Pod and Deployment definitions
|BackupStorage.SupplementalGroups        | optional, if set, will cause a SecurityContext to be added to generated Pod and Deployment definitions
|Pgo.LSPVCTemplate        | the PVC lspvc template file that lists PVC contents
|Pgo.CSVLoadTemplate        | the CSV load template file used for load jobs
|Pgo.COImageTag        | image tag to use for the PostgreSQL operator containers
|Pgo.Debug        | set to true if you want to see debug messages from the pgo client
|======================

*NOTE*: Regarding the PVC access mode variable; this is automatically set to ReadWriteMany but
you also have the option to set this to ReadWriteOnce or ReadOnlyMany. The definitions of these
are as follows:

* *ReadWriteMany* - mounts the volume as read-write by many nodes
* *ReadWriteOnce* - mounts the PVC as read-write by a single node
* *ReadOnlyMany* - mounts the PVC as read-only by many nodes

== Operator Configuration (Server)

The operator is run as a Kubernetes Deployment on the Kubernetes cluster
within a namespace.

Execute the Makefile target *deployoperator* to deploy the Operator.

You can also create NFS PV(s) using the create-pv-nfs.sh script.

To enable DEBUG messages from the operator pod, set the *Debug* environment
variable to *true* within its deployment file *deployment.json*.

=== Operator Templates

The database and cluster Kubernetes objects that get created by the operator
are based on json templates that are added into the operator deployment
by means of a mounted volume.

The templates are located in the *$COROOT/conf/postgres-operator* directory
and get added into a config map which is mounted by the operator deployment.

For your persistent file system, you might need to adjust the templates
to add *fsGroup* or *supplementalGroup* attributes to your *pgo* configuration
file.

=== Persistence

Different ways of handling storage are specified by a user in
the *.pgo.yaml* configuration file by specifying values within
the ReplicaStorage, PrimaryStorage, and BackupStorage settings.

The following StorageType values are possible:

 * *dynamic* - Currently not implemented, this will allow for dynamic
 provisioning of storage using a StorageClass.
 * *existing* - This setting allows you to use a PVC that already exists.
 For example, if you have a NFS volume mounted to a PVC, all PostgreSQL clusters
 can write to that NFS volume mount via a common PVC. When set, the Name
 setting is used for the PVC.
 * *create* - This setting allows for the creation of a new PVC for
 each PostgreSQL cluster using a naming convention of *clustername*-pvc*.
 When set, the *Size*, *AccessMode* settings are used in
 constructing the new PVC.
 * *emptydir* - If a StorageType value is not defined, *emptydir* is used by default.
 This is a volume type thatâ€™s created when a pod is assigned to a node and exists as
 long as that pod remains running on that node; it is deleted as soon as the pod is
 manually deleted or removed from the node.

The operator will create new PVCs using this naming convention:
*dbname-pvc* where *dbname* is the database name you have specified.  For
example, if you run:
....
pgo create cluster example1
....

It will result in a PVC being created named *example1-pvc* and in
the case of a backup job, the pvc is named *example1-backup-pvc*

There are currently 3 sample pgo configuration files provided
for users to use as a starting configuration:

 * pgo.yaml.emptydir - this configuration specifies *emptydir* storage
 to be used for databases
 * pgo.yaml.nfs - this configuration specifies *create* storage to
 be used, this is used for NFS storage for example where you want to
 have a unique PVC created for each database
 * pgo.yaml.dynamic - this configuration specifies *dynamic* storage
 to be used, namely a *storageclass* that refers to a dynamic provisioning
 strorage such as StorageOS or Portworx, or GCE.
