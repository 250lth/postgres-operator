== Crunchy Operator
v1.0.0, {docdate}

image::docs/crunchy_logo.png?raw=true[]

Crunchy Operator provides a Kubernetes operator capability
for managing PostgreSQL containers deployed within a Kubernetes cluster.

# Usage

Some examples of using the command line interface:

.Display Database or Cluster Information
[source,bash]
----
crunchy show database all
crunchy show database db1 db2 db3
crunchy show cluster mycluster
----

.Create Database or Cluster
[source,bash]
----
crunchy create database mydatabase
crunchy create cluster mycluster
----

.Delete a Database or Cluster
[source,bash]
----
crunchy delete database mydatabase
crunchy delete cluster mycluster
----

.Backup Database or Cluster
[source,bash]
----
crunchy backup mycluster
crunchy backup mydatabase
----


# Crunchy-Operator Container

The operator funtionality runs in a Pod deployed to your
Kubernetes cluster.  The *crunchy-operator* Docker container
is available on Dockerhub.  

You can also build the Docker image for *crunchy-operator* using
the build instructions below.

The first step to using the operator is to deploy
the operator container to your Kubernetes environment
by running the script located at:
TODO

Verify the operator is running:
....
kubectl get pod TODO
....

Verify the operator installed the following ThirdPartyResources:
....
kubectl get thirdpartyresources
TODO
....

# Command Line Interface

With the operator deployed, you can then use the *crunchy* command line 
interface to execute commands that the *crunchy-operator* understands 
and reacts to.

You can download a pre-built *crunchy* CLI binary from 
the Releases page on the github repository or build
it yourself using the build instructions below.


# Build Instructions

Here are the steps required to build the operator and CLI
from source:

=== Create Project and Clone 
....
mkdir -p $HOME/odev/src $HOME/odev/bin $HOME/odev/pkg
export GOPATH=$HOME/odev
export GOBIN=$GOPATH/bin
mkdir -p $GOPATH/src/github.com/crunchydata/
cd $GOPATH/github.com/crunchydata
git clone https://github.com/CrunchyData/crunchy-operator.git
cd crunchy-operator
export COROOT=$GOPATH/src/github.com/crunchydata/crunchy-operator
....

Get the dependencies:
....
cd $COROOT
go get -u github.com/FiloSottile/gvt
make restore
....

Compile the CLI:
....
cd $COROOT
make cli
....

Compile and build the operator Docker image:
....
cd $COROOT
make operatorimage
....


=== Test Environment

minikube 1.6.0-alpha, executed using:
....
minikube start --kubernetes-version=v1.6.0-alpha.0 --feature-gates=AllAlpha=true
....

=== Allowing minikube Docker Image Access

On minikube, to use the local docker image, in /etc/sysconfig/docker:
....
< DOCKER_CERT_PATH=/etc/docker
---
> if [ -z "${DOCKER_CERT_PATH}" ]; then
>   DOCKER_CERT_PATH=/etc/docker
> fi
....

then,
....
eval $(minikube docker-env)
....

=== Building
....
gvt restore
make operatorserver
....

Current dependencies include:
....
gvt fetch -tag v2.0.0 k8s.io/client-go
....

=== CLI 

run the client like this to test with:
....
cd client
go run main.go show --selector='name=ms-master' --kubeconfig=/home/jeffmc/.kube/config
....

Viewing database components (service and pod):
....
crunchy show database 
crunchy show database ms-master
crunchy show database --selector='crunchydb=ms-master'
....

Viewing database cluster components (service and pods):
....
crunchy show cluster
crunchy show cluster mycluster
crunchy show cluster --selector='crunchycluster=mycluster'
....

Creating database pod and related service:
....
crunchy create database -name=foodb
crunchy create database -name=foodb -pvc=foopvc
crunchy create cluster -name=mycluster
crunchy create cluster -name=mycluster -pvc=mypvc
crunchy backup -name=foodb -pvc=foopvc
crunchy restore -name=restoredb -pvc=foopvc -archive=foodb-backups/01-09-01-2 -pvc=restorepvc
crunchy delete cluster -name=mycluster
crunchy delete database -name=foodb
....

Future ideas:
....
crunchy upgrade database -name=foodb -to=9.6
crunchy database policy update -config=pg_hba.conf -name=foodb
crunchy database policy update -config=pg_hba.conf -all
crunchy user add -name=foodb -config=userconfig
crunchy user delete -name=foodb -user=foouser
....

=== TPR Endpoints

After creating the TPRs, you can work with TPR objects from the
new TPR APIs as follows:
....
 curl https//192.168.42.30:8443/apis/crunchydata.com/v1/crunchydatabases --insecure
 curl https//192.168.42.30:8443/apis/crunchydata.com/v1/crunchyclusters --insecure
....
