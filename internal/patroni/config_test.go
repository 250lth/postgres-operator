/*
 Copyright 2021 Crunchy Data Solutions, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package patroni

import (
	"strings"
	"testing"

	"gotest.tools/v3/assert"
	"gotest.tools/v3/assert/cmp"
	appsv1 "k8s.io/api/apps/v1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/crunchydata/postgres-operator/pkg/apis/postgres-operator.crunchydata.com/v1alpha1"
)

func marshalContains(actual interface{}, expected string) cmp.Comparison {
	b, err := yaml.Marshal(actual)
	return func() cmp.Result {
		if err != nil {
			return cmp.ResultFromError(err)
		}

		if !strings.Contains(string(b), expected) {
			return cmp.DeepEqual(string(b), expected)()
		}

		return cmp.ResultSuccess
	}
}

func TestClusterConfigMap(t *testing.T) {
	t.Parallel()

	cluster := &v1alpha1.PostgresCluster{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: "some-namespace",
			Name:      "cluster-name",
		},
	}
	cm := &v1.ConfigMap{}

	assert.NilError(t, clusterConfigMap(cluster, cm))

	assert.Equal(t, cm.Data["patroni.yaml"], strings.TrimSpace(`
# Generated by postgres-operator. DO NOT EDIT.
# Your changes will not be saved.
kubernetes:
  labels: {}
  namespace: some-namespace
  role_label: postgres-operator.crunchydata.com/role
  scope_label: postgres-operator.crunchydata.com/cluster
  use_endpoints: true
postgresql:
  authentication: {}
  create_replica_methods: []
scope: cluster-name
	`)+"\n")

	// No change when called again.
	before := cm.DeepCopy()
	assert.NilError(t, clusterConfigMap(cluster, cm))
	assert.DeepEqual(t, cm, before)
}

func TestInstanceConfigMap(t *testing.T) {
	t.Parallel()

	cluster := &v1alpha1.PostgresCluster{}
	instance := &appsv1.Deployment{}
	cm := &v1.ConfigMap{}

	assert.NilError(t, instanceConfigMap(cluster, instance, cm))

	assert.Equal(t, cm.Data["patroni.yaml"], strings.TrimSpace(`
# Generated by postgres-operator. DO NOT EDIT.
# Your changes will not be saved.
kubernetes: {}
postgresql:
  use_unix_socket: true
restapi: {}
tags: {}
	`)+"\n")

	// No change when called again.
	before := cm.DeepCopy()
	assert.NilError(t, instanceConfigMap(cluster, instance, cm))
	assert.DeepEqual(t, cm, before)
}

func TestInstanceEnvVars(t *testing.T) {
	t.Parallel()

	cluster := &v1alpha1.PostgresCluster{}
	pod := &v1.PodSpec{}

	correct := func() cmp.Result {
		return marshalContains(pod.Containers[0].Env, strings.TrimSpace(`
- name: PATRONI_NAME
  valueFrom:
    fieldRef:
      apiVersion: v1
      fieldPath: metadata.name
- name: PATRONI_KUBERNETES_POD_IP
  valueFrom:
    fieldRef:
      apiVersion: v1
      fieldPath: status.podIP
- name: PATRONI_KUBERNETES_PORTS
  value: |
    []
- name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
  value: $(PATRONI_KUBERNETES_POD_IP):5432
- name: PATRONI_POSTGRESQL_LISTEN
  value: '*:5432'
- name: PATRONI_RESTAPI_CONNECT_ADDRESS
  value: $(PATRONI_KUBERNETES_POD_IP):8008
- name: PATRONI_RESTAPI_LISTEN
  value: '*:8008'
- name: PATRONI_CONFIG_FILE
  value: /etc/patroni
- name: PATRONICTL_CONFIG_FILE
  value: /etc/patroni
		`)+"\n")()
	}

	instanceEnvVars(cluster, pod)

	assert.Assert(t, correct)

	// No change when called again.
	before := pod.DeepCopy()
	instanceEnvVars(cluster, pod)
	assert.DeepEqual(t, pod, before)

	t.Run("WithExisting", func(t *testing.T) {
		pod.Containers[0].Env = []v1.EnvVar{
			{Name: "existed"},
			{Name: "PATRONI_KUBERNETES_POD_IP"},
			{Name: "also", Value: "kept"},
		}

		instanceEnvVars(cluster, pod)

		assert.Assert(t, correct)
		assert.Assert(t, marshalContains(pod.Containers[0].Env, strings.TrimSpace(`
- name: existed
- name: also
  value: kept
		`)+"\n"))

		// Correct values can be in the middle somewhere.
		pod.Containers[0].Env = append(pod.Containers[0].Env,
			v1.EnvVar{Name: "at", Value: "end"})

		// No change when already correct.
		before := pod.DeepCopy()
		instanceEnvVars(cluster, pod)
		assert.DeepEqual(t, pod, before)
	})
}

func TestInstanceConfigVolumeAndMount(t *testing.T) {
	t.Parallel()

	cluster := &v1alpha1.PostgresCluster{}
	cm1 := &v1.ConfigMap{ObjectMeta: metav1.ObjectMeta{Name: "cm1"}}
	cm2 := &v1.ConfigMap{ObjectMeta: metav1.ObjectMeta{Name: "cm2"}}
	pod := &v1.PodSpec{}

	correctVolume := func() cmp.Result {
		return marshalContains(pod.Volumes, strings.TrimSpace(`
- name: patroni-config
  projected:
    sources:
    - configMap:
        items:
        - key: patroni.yaml
          path: ~postgres-operator_cluster.yaml
        name: cm1
    - configMap:
        items:
        - key: patroni.yaml
          path: ~postgres-operator_instance.yaml
        name: cm2
		`)+"\n")()
	}

	correctVolumeMount := func() cmp.Result {
		return marshalContains(pod.Containers[0].VolumeMounts, strings.TrimSpace(`
- mountPath: /etc/patroni
  name: patroni-config
  readOnly: true
		`)+"\n")()
	}

	instanceConfigVolumeAndMount(cluster, cm1, cm2, pod)

	assert.Assert(t, correctVolume)
	assert.Assert(t, correctVolumeMount)

	// No change when called again.
	before := pod.DeepCopy()
	instanceConfigVolumeAndMount(cluster, cm1, cm2, pod)
	assert.DeepEqual(t, pod, before)

	t.Run("WithExistingVolumes", func(t *testing.T) {
		pod.Volumes = []v1.Volume{
			{Name: "existing"},
			{Name: "patroni-config", VolumeSource: v1.VolumeSource{
				EmptyDir: &v1.EmptyDirVolumeSource{Medium: "Memory"},
			}},
		}

		instanceConfigVolumeAndMount(cluster, cm1, cm2, pod)

		assert.Assert(t, correctVolume)
		assert.Assert(t, marshalContains(pod.Volumes, strings.TrimSpace(`
- name: existing
		`)+"\n"))

		// Correct values can be in the middle somewhere.
		pod.Volumes = append(pod.Volumes, v1.Volume{Name: "later"})

		// No change when already correct.
		before := pod.DeepCopy()
		instanceConfigVolumeAndMount(cluster, cm1, cm2, pod)
		assert.DeepEqual(t, pod, before)
	})

	t.Run("WithExistingVolumeMounts", func(t *testing.T) {
		pod.Containers[0].VolumeMounts = []v1.VolumeMount{
			{Name: "existing", MountPath: "mount"},
			{Name: "patroni-config", MountPath: "wrong"},
		}

		instanceConfigVolumeAndMount(cluster, cm1, cm2, pod)

		assert.Assert(t, correctVolume)
		assert.Assert(t, marshalContains(pod.Containers[0].VolumeMounts, strings.TrimSpace(`
- mountPath: mount
  name: existing
		`)+"\n"))

		// Correct values can be in the middle somewhere.
		pod.Containers[0].VolumeMounts = append(pod.Containers[0].VolumeMounts,
			v1.VolumeMount{Name: "later"})

		// No change when already correct.
		before := pod.DeepCopy()
		instanceConfigVolumeAndMount(cluster, cm1, cm2, pod)
		assert.DeepEqual(t, pod, before)
	})
}
