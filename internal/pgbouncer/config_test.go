/*
 Copyright 2021 Crunchy Data Solutions, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package pgbouncer

import (
	"strings"
	"testing"

	"gotest.tools/v3/assert"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/crunchydata/postgres-operator/pkg/apis/postgres-operator.crunchydata.com/v1beta1"
)

func TestAuthFileContents(t *testing.T) {
	t.Parallel()

	password := `very"random`
	data := authFileContents([]byte(password))
	assert.Equal(t, string(data), `"_crunchypgbouncer" "very""random"`+"\n")
}

func TestClusterINI(t *testing.T) {
	t.Parallel()

	cluster := new(v1beta1.PostgresCluster)
	cluster.Default()

	cluster.Name = "foo-baz"
	*cluster.Spec.Port = 9999

	cluster.Spec.Proxy = new(v1beta1.PostgresProxySpec)
	cluster.Spec.Proxy.PGBouncer = new(v1beta1.PGBouncerPodSpec)
	cluster.Spec.Proxy.PGBouncer.Port = new(int32)
	*cluster.Spec.Proxy.PGBouncer.Port = 8888

	assert.Equal(t, clusterINI(cluster), strings.Trim(`
# Generated by postgres-operator. DO NOT EDIT.
# Your changes will not be saved.

[pgbouncer]
auth_user = _crunchypgbouncer
[databases]
* = host=foo-baz-primary port=9999

[pgbouncer]
ignore_startup_parameters = extra_float_digits

[pgbouncer]
auth_file = /etc/pgbouncer/~postgres-operator/users.txt
auth_query = SELECT username, password from pgbouncer.get_auth($1)
auth_user = _crunchypgbouncer
conffile = /etc/pgbouncer/~postgres-operator.ini
listen_addr = *
listen_port = 8888
server_tls_ca_file = /etc/pgbouncer/~postgres-operator-backend/ca.crt
server_tls_sslmode = verify-full
unix_socket_dir = 
	`, "\t\n")+"\n")
}

func TestPodConfigFiles(t *testing.T) {
	t.Parallel()

	ccm := &corev1.ConfigMap{ObjectMeta: metav1.ObjectMeta{Name: "some-cm"}}
	cs := &corev1.Secret{ObjectMeta: metav1.ObjectMeta{Name: "some-shh"}}

	projections := podConfigFiles(ccm, cs)

	assert.Assert(t, marshalEquals(projections, strings.Trim(`
- configMap:
    items:
    - key: pgbouncer.ini
      path: ~postgres-operator.ini
    name: some-cm
- secret:
    items:
    - key: pgbouncer-users.txt
      path: ~postgres-operator/users.txt
    name: some-shh
	`, "\t\n")+"\n"))
}
