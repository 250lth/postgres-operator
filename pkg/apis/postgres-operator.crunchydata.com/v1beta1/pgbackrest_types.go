/*
 Copyright 2021 Crunchy Data Solutions, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PGBackRestArchive defines a pgBackRest archive configuration
type PGBackRestArchive struct {

	// Projected volumes containing custom pgBackRest configuration.  These files are mounted
	// under "/etc/pgbackrest/conf.d" alongside any pgBackRest configuration generated by the
	// PostgreSQL Operator:
	// https://pgbackrest.org/configuration.html
	// +optional
	Configuration []corev1.VolumeProjection `json:"configuration,omitempty"`

	// Global pgBackRest configuration settings.  These settings are included in the "global"
	// section of the pgBackRest configuration generated by the PostgreSQL Operator, and then
	// mounted under "/etc/pgbackrest/conf.d":
	// https://pgbackrest.org/configuration.html
	// +optional
	Global map[string]string `json:"global,omitempty"`

	// Defines a pgBackRest repository
	// +kubebuilder:validation:Required
	// +listType=map
	// +listMapKey=name
	Repos []PGBackRestRepo `json:"repos,omitempty"`

	// Defines a pgBackRest repository host
	// +optional
	RepoHost *PGBackRestRepoHost `json:"repoHost,omitempty"`
}

// PGBackRestRepoHost represents a pgBackRest dedicated repository host
type PGBackRestRepoHost struct {

	// Defines a dedicated repository host configuration
	// +optional
	Dedicated *DedicatedRepo `json:"dedicated,omitempty"`

	// The image name to use for pgBackRest containers
	// +kubebuilder:validation:Required
	Image string `json:"image"`

	// Resource requirements for a pgBackRest repository host
	// +optional
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`

	// ConfigMap containing custom SSH configuration
	// +optional
	SSHConfiguration *corev1.ConfigMapProjection `json:"sshConfigMap,omitempty"`

	// Secret containing custom SSH keys
	// +optional
	SSHSecret *corev1.SecretProjection `json:"sshSecret,omitempty"`
}

// PGBackRestStatus defines the status of pgBackRest within a PostgresCluster
type PGBackRestStatus struct {

	// Status information for the pgBackRest dedicated repository host
	// +optional
	RepoHost *RepoHostStatus `json:"repoHost,omitempty"`

	// Status information for the pgBackRest repository host
	// +kubebuilder:validation:Required
	Repos []RepoStatus `json:"repos,omitempty"`
}

// PGBackRestRepo represents a pgBackRest repository.  Only one of its members may be specified.
type PGBackRestRepo struct {
	// Please note that as a Union type that follows OpenAPI 3.0 'oneOf' semantics, the following KEP
	// will be applicable once implemented:
	// https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1027-api-unions

	// The name of the the repository
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Pattern=^repo[1-4]
	Name string `json:"name"`

	// Represents a pgBackRest repository that is created using Azure storage
	// +optional
	Azure *RepoAzure `json:"azure,omitempty"`

	// Represents a pgBackRest repository that is created using Google Cloud Storage
	// +optional
	GCS *RepoGCS `json:"gcs,omitempty"`

	// RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible)
	// storage
	// +optional
	S3 *RepoS3 `json:"s3,omitempty"`

	// Represents a pgBackRest repository that is created using a PersistentVolumeClaim
	// +optional
	Volume *RepoPVC `json:"volume,omitempty"`
}

// RepoHostStatus defines the status of a pgBackRest repository host
type RepoHostStatus struct {
	metav1.TypeMeta `json:",inline"`

	// Whether or not the pgBackRest repository host is ready for use
	// +optional
	Ready bool `json:"ready"`
}

// RepoPVC represents a pgBackRest repository that is created using a PersistentVolumeClaim
type RepoPVC struct {

	// Defines a PersistentVolumeClaim spec used to create and/or bind a volume
	// +kubebuilder:validation:Required
	VolumeClaimSpec corev1.PersistentVolumeClaimSpec `json:"volumeClaimSpec"`
}

// RepoAzure represents a pgBackRest repository that is created using Azure storage
type RepoAzure struct {

	// The Azure container utilized for the repository
	// +kubebuilder:validation:Required
	Container string `json:"container"`
}

// RepoGCS represents a pgBackRest repository that is created using Google Cloud Storage
type RepoGCS struct {

	// The GCS bucket utilized for the repository
	// +kubebuilder:validation:Required
	Bucket string `json:"bucket"`
}

// RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible)
// storage
type RepoS3 struct {

	// The S3 bucket utilized for the repository
	// +kubebuilder:validation:Required
	Bucket string `json:"bucket"`

	// A valid endpoint corresponding to the specified region
	// +kubebuilder:validation:Required
	Endpoint string `json:"endpoint"`

	// The region corresponding to the S3 bucket
	// +kubebuilder:validation:Required
	Region string `json:"region"`
}

// RepoVolumeStatus the status of a pgBackRest repository
type RepoStatus struct {

	// Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
	// +optional
	Bound bool `json:"bound,omitempty"`

	// The name of the pgBackRest repository
	// +kubebuilder:validation:Required
	Name string `json:"name"`

	// A hash of the required fields in the spec for defining an Azure, GCS or S3 repository,
	// Utilizd to detect changes to these fields and then execute pgBackRest stanza-create
	// commands accordingly.
	// +optional
	RepoOptionsHash string `json:"repoOptionsHash,omitempty"`

	// Specifies whether or not a stanza has been successfully created for the repository
	StanzaCreated bool `json:"stanzaCreated"`

	// The name of the volume the containing the pgBackRest repository
	// +optional
	VolumeName string `json:"volume,omitempty"`
}
